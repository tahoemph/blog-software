<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Explorations in software development</title>
    <link>http://blog-software.firebaseapp.com/post/index.xml</link>
    <description>Recent content in Posts on Explorations in software development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>tahoemph@gmail.com (Michael Hunter)</managingEditor>
    <webMaster>tahoemph@gmail.com (Michael Hunter)</webMaster>
    <copyright>(c) 2018 Michael Hunter</copyright>
    <lastBuildDate>Mon, 02 Jul 2018 08:51:14 -0700</lastBuildDate>
    <atom:link href="http://blog-software.firebaseapp.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crostini debugging node with Chrome</title>
      <link>http://blog-software.firebaseapp.com/post/crostini-debugging-node-with-chrome/</link>
      <pubDate>Mon, 02 Jul 2018 08:51:14 -0700</pubDate>
      <author>tahoemph@gmail.com (Michael Hunter)</author>
      <guid>http://blog-software.firebaseapp.com/post/crostini-debugging-node-with-chrome/</guid>
      <description>&lt;p&gt;The integration of the Chrome Dev Tools with Node.js landed in Chrome 57 (it was exprimental before that).
You have to be using Node.js 6.4+.  This is a wonderful Node.js debugging environment.  On  single
machine it works with little effort.  But when working on a node app in Crostini it takes a bit of additional
effort.  This is because the &amp;ldquo;machine&amp;rdquo; you are running the node app on is different from where you want your
browser to be running.&lt;/p&gt;

&lt;p&gt;Before I go into my solution it is worthwhile to mention that you can run chrome from within the Crostini
VM.  I found various issues with doing this.  The primary one is that the ChromeOS window manager doesn&amp;rsquo;t
know about your Crostini Chrome windows.  This makes managing them on even a basic desktop less then great.
Also I found that sometimes I would start Chrome from Crostini and the keyboard was non-responsive.&lt;/p&gt;

&lt;p&gt;There is a better solution!  Chrome supports remote debugging.  And by treating your Crostini instance as
a remote machine you can have the best of the Chromebook and Crostini worlds.  In order to do this you
will have to know something, configure something in Chrome in ChromeOS, and modify your invocation when
debugging.&lt;/p&gt;

&lt;p&gt;The overview is that we will tell the ChromeOS Chrome that there is an external target.  That will require
that we know the Crostini IP address.  And when we invoke the node debugger we will tell it to bind to that
address instead of a local one.&lt;/p&gt;

&lt;p&gt;In order to get your VMs IP address use ifconfig as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;tahoemph@penguin:~$ /sbin/ifconfig eth0
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 100.115.92.204  netmask 255.255.255.240  broadcast 100.115.92.207
        inet6 fe80::216:3eff:fe7f:30ad  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 00:16:3e:7f:30:ad  txqueuelen 1000  (Ethernet)
        RX packets 325869  bytes 2921520373 (2.7 GiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 248961  bytes 42623729 (40.6 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to take that and configure it into chrome.  Go to &amp;ldquo;about:inspect&amp;rdquo; (chrome://inspect/#devices).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog-software.firebaseapp.com/images/chrome_inspect.png&#34; alt=&#34;about:inspect&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Choose &amp;ldquo;Configure&amp;rdquo; and enter 100.115.92.204:9229 (or whatever the IP address you discovered above was).  When done
and you return to the &amp;ldquo;about:inspect&amp;rdquo; tab you will discovered that now you have a &amp;ldquo;Remote Target&amp;rdquo; conigured.&lt;/p&gt;

&lt;p&gt;When debugging you will need to tell inspect what address to bind to.  By default it will bind to localhost
which won&amp;rsquo;t allow the remote debugger to attach.  You do work around this by supplying the &amp;ndash;inspect-brk flag with
an IP address as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;tahoemph@penguin:~/src/personal/foreclosure_data$ node --inspect-brk=100.115.92.204:9229 main.js
Debugger listening on ws://100.115.92.204:9229/5435fdc1-0bc4-4656-bde1-f7748856d664
For help see https://nodejs.org/en/docs/inspector       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you do this a target will appear under Remote Target in the &amp;ldquo;about:inspect&amp;rdquo; window and you can either
choose &amp;ldquo;Open dedicated Dev Tools for Node&amp;rdquo; or &amp;ldquo;inspect&amp;rdquo; under the target to begin debugging.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crostini upgrade pain</title>
      <link>http://blog-software.firebaseapp.com/post/crostini-upgrade-pain/</link>
      <pubDate>Mon, 02 Jul 2018 08:42:07 -0700</pubDate>
      <author>tahoemph@gmail.com (Michael Hunter)</author>
      <guid>http://blog-software.firebaseapp.com/post/crostini-upgrade-pain/</guid>
      <description>&lt;p&gt;Not all goes well when you are on the bleeding edge.  When upgrading from
&amp;ldquo;10798.0.0 (Official Build) dev-channel eve&amp;rdquo; to &amp;ldquo;Version 69.0.3473.0 (Official Build) dev (64-bit)&amp;rdquo;
I ended up encounting a problem.  Before upgrading I backedup all of my user files in the VM.  This
ended up saving me.&lt;/p&gt;

&lt;p&gt;After upgrade I was somewhat surprised that my VM seemed to be whole and viable.  But after less than
an hour the Chromebook froze and I needed to refresh-reboot it.  It came up but when I tried to start
the Terminal it spun and nothing happened.&lt;/p&gt;

&lt;p&gt;I ended up in crosh and ultimately removed the vm with &amp;lsquo;vmx destroy termina&amp;rsquo;.  This was after failure
attempting to start/stop the VM.  Then I could start a blank VM And restore my content losing only what
I had done in the interim.&lt;/p&gt;

&lt;p&gt;I gathered little data about what the problem was.  This was my first time on crosh.  I&amp;rsquo;ll have to
develop some muscle around manipulating VMs so that if I run into difficulties in the future I will
have a better chance of root causing and possibly saving the existing VM.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crostini dev environment</title>
      <link>http://blog-software.firebaseapp.com/post/crostini-dev-environment/</link>
      <pubDate>Sun, 01 Jul 2018 20:18:24 -0700</pubDate>
      <author>tahoemph@gmail.com (Michael Hunter)</author>
      <guid>http://blog-software.firebaseapp.com/post/crostini-dev-environment/</guid>
      <description>&lt;p&gt;I have become less then enthused with the macOS envrionment due to its odd set of choices
and constant friction with open source tools.  My first thought was to
get a linux laptop thus removing the OSS friction.  I also tried an Ubuntu 18 install
on my MacBook but that had various issues and felt like a waste of the hardware.&lt;/p&gt;

&lt;p&gt;I like the idea of Chromebooks.
Security, long battery life, and a fair bit of stability are important to me for application
development tasks.  So I took several shots at using a Chromebook and finally
have found a development environment that works.&lt;/p&gt;

&lt;p&gt;First I tried this using termux following this
&lt;a href=&#34;https://blog.lessonslearned.org/building-a-more-secure-development-chromebook/&#34;&gt;article&lt;/a&gt;
using a Samsung Chromebook Plus.  This is an ARM based machine which a really nice IPS
screen.  Somewhere between the processor maybe not having enough oomph and setting
up the termux based environment this failed.  It felt clunky and not something that
would be easy to maintain and update.&lt;/p&gt;

&lt;p&gt;About the time I gave up on termux Google
&lt;a href=&#34;https://liliputing.com/2018/04/googles-crostini-lets-you-run-gnu-linux-apps-on-chromebooks-without-enabling-developer-mode.html&#34;&gt;announced&lt;/a&gt;
a VM based dev solution on Chromebooks called Crostini.  Initially it was very limited but it has grown
some reasonable capabilities.  Currently I am using &lt;del&gt;&amp;ldquo;10798.0.0 (Official Build) dev-channel eve&amp;rdquo;&lt;/del&gt;&amp;ldquo;Version 69.0.3473.0 (Official Build) dev (64-bit)&amp;rdquo;.  With this upgrade tmux now works.  Yea!&lt;/p&gt;

&lt;p&gt;Configuration information is available
&lt;a href=&#34;https://chromium.googlesource.com/chromiumos/docs/+/master/containers_and_vms.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Future articles will go into issues I encounter and how to resolve them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://blog-software.firebaseapp.com/post/introduction/</link>
      <pubDate>Sat, 30 Jun 2018 12:52:43 -0700</pubDate>
      <author>tahoemph@gmail.com (Michael Hunter)</author>
      <guid>http://blog-software.firebaseapp.com/post/introduction/</guid>
      <description>&lt;p&gt;I havn&amp;rsquo;t blogged in a long time.  I&amp;rsquo;ve recently been spending some time
focusing on making my development environment better.  Expressing some of
that publically will be helpful to me and might be helpful to others.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>